'use strict';
const Generator = require('yeoman-generator');
const chalk = require('chalk');
const yosay = require('yosay');
const dependencies = require('./dependencies');
const path = require('path');
const fs = require('fs');
const prompts = require('./promps');

module.exports = class extends Generator {
    constructor(args, opts){
        super(args, opts);
        // add custom code
        this.option('saga', {
            type: Boolean,
            desc: "need to use saga or not.",
            default: true
        });
        this.option('thunk', {
            type: Boolean,
            desc: "need to use thunk or not.",
            default: false
        });
        this.appname = path.basename(process.cwd());
        this.appAuthor = "zmzhang";
    }

    // 初始化
    initializing(){
        this.log("Start to init the project!......");
    }

    prompting() {
        // Have Yeoman greet the user.
        this.log(yosay(
            'Welcome to the fantabulous ' + chalk.red('generator-react-redux-saga-webpack') + ' generator!'
        ));

        return this.prompt(prompts).then(props => {
            // To access props later use this.props.someAnswer;
            this.props = props;
        });
    }

    // 写入配置
    configuring(){
        const defaultSettings = JSON.parse(fs.readFileSync(this.templatePath('package.json')))
        const settings = Object.assign({}, defaultSettings, {
            name: this.appname,
            version: '0.0.1',
            description: `${this.appname} - generated by generator-react-redux-saga-webpack`,
            author: this.props.author,
            repository: this.props.repository,
            keywords: this.props.keywords.split(',')
        })
        if (!this.props.saga){
            delete  settings.dependencies['redux-saga']
        }
        fs.writeFile(this.destinationPath('package.json'), JSON.stringify(settings))
    }

    writing() {
        fs.mkdirSync('dist');
        const copyList = {
            'src':'src',
            'webpack': 'webpack',
            'webpack.config.js': 'webpack.config.js',
            'babelrcTemp': '.babelrc',
            'editorconfigTemp': '.editorconfig',
            'eslintrcTemp': '.eslintrc.js',
            'gitignoreTemp': '.gitignore'
        }
        Object.keys(copyList).map(key => {
            this.fs.copy(
                this.templatePath(key),
                this.destinationPath(copyList[key])
            )
        })
    }

    install() {
        this.installDependencies({bower: false});
    }
};
